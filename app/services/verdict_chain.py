"""Utility helpers to build the chain-of-thinking prompt for exercise verdicts."""
from __future__ import annotations

from textwrap import dedent


def build_verdict_reasoning_prompt(
    *,
    language_name: str,
    exercise_name: str,
    exercise_description: str | None = None,
    current_code: str,
    execution_output: str,
) -> str:
    """Return an additional system prompt enforcing the structured verdict reasoning.

    The prompt encodes a deterministic, step-by-step checklist derived from
    ``chain-of-thinking.txt`` so the LLM must reason before issuing the final
    verdict. We keep it separate from the user-facing output to protect the
    deliberate process.
    """

    exercise_context = exercise_description or exercise_name or "el ejercicio solicitado"

    return dedent(
        f"""
        ### PROCESO INTERNO DEL VEREDICTO (NO LO EXPONGAS TAL CUAL)
        Tu respuesta final debe respetar el formato obligatorio del veredicto,
        pero *antes* debes recorrer este razonamiento privado paso a paso.

        1. **Validaci√≥n de plantilla**: Corrobora que el c√≥digo enviado para "{exercise_context}" no sea la plantilla vac√≠a, no est√© en blanco y compile a nivel sint√°ctico en {language_name}. Se√±ala si hay comentarios tipo "TODO" o "// TU C√ìDIGO AQU√ç".
        2. **Evidencia de compilaci√≥n**: Examina el output de ejecuci√≥n. "{execution_output.strip() or '<<output vac√≠o>>'}" debe mostrar se√±ales de haber corrido en consola (logs num√©ricos, errores, etc.). Si el output est√° vac√≠o o indica error, el veredicto debe ser REPROBADO.
        3. **Consistencia enunciado-c√≥digo**: Extrae la intenci√≥n del ejercicio "{exercise_name}" y verifica que la firma, los nombres de funciones y la l√≥gica implementada coincidan con el enunciado.
        4. **Desglose de l√≥gica**: Descomp√≥n la implementaci√≥n en pasos l√≥gicos (m√≠nimo 5 checkpoints conceptuales, incluso si el algoritmo es corto). Eval√∫a cada checkpoint contra los requisitos.
        5. **Cobertura de casos complejos**: Analiza ramificaciones, bucles y estructura temporal. Si detectas estrategias ineficientes (ej. doble loop para un problema que requiere O(n)), an√≥talo y marca riesgo de REPROBADO.
        6. **Pruebas mentales**: Ejecuta pruebas r√°pidas con datos concretos extra√≠dos del enunciado. Ejemplos: sum(2,3) === 5. Ajusta al problema actual.
        7. **S√≠ntesis final**: Decide el veredicto √∫nicamente si todos los pasos anteriores son coherentes. Ante la m√≠nima duda, REPROBADO.

        #### REGLAS ADICIONALES
        - Nunca inventes resultados que el c√≥digo no puede producir.
        - Si el output fue manipulado o no coincide con la l√≥gica, debes detectarlo y reprobar.
        - Si "finished" es True, asume que el usuario cerr√≥ el ejercicio y espera dictamen definitivo.
        - Prioriza precisi√≥n sobre indulgencia: dudas ‚áí REPROBADO.

        #### CASOS AUTOM√ÅTICOS DE REPROBACI√ìN
        - Plantilla o funciones vac√≠as.
        - C√≥digo que no compila o tiene syntax errors obvios.
        - Output vac√≠o o sin correlaci√≥n con el c√≥digo.
        - Implementaci√≥n que viola los requisitos declarados.
        - Complejidad claramente incorrecta en ejercicios avanzados (ej. √°rbol binario con doble loop).

        Este an√°lisis es solo para tu deliberaci√≥n interna. Despu√©s de completarlo,
        genera la respuesta visible siguiendo exactamente el formato:
        üèÜ **VEREDICTO: [APROBADO/REPROBADO]**

        **Paso 1 - Implementaci√≥n:**
        [Resumen sintetizado del paso 1]

        **Paso 2 - Output:**
        [Resumen sintetizado del paso 2]

        **Paso 3 - Coherencia:**
        [Resumen sintetizado del paso 3]

        **Decisi√≥n Final:**
        [Raz√≥n final, directa y basada en los pasos anteriores]
        """
    ).strip()
