from typing import Tuple, Optional

def detect_automatic_prompt_type(message_content: str, finished: bool = False) -> Optional[str]:
    """
    Detecta el tipo de prompt autom√°tico bas√°ndose en el contenido del mensaje y el flag finished.

    Args:
        message_content: Contenido del mensaje
        finished: Flag que indica si el usuario termin√≥ el ejercicio

    Returns:
        - "INIT_INTERVIEW": Inicio de entrevista
        - "HINT_REQUEST": Solicitud de pista
        - "EXERCISE_END": Finalizaci√≥n de ejercicio (tiempo agotado/rendirse)
        - "EXERCISE_VERDICT": Evaluaci√≥n de ejercicio terminado (finished=True)
        - None: No es un prompt autom√°tico reconocido
    """
    content = message_content.strip()

    # Si finished=True, siempre es EXERCISE_VERDICT independientemente del contenido
    if finished:
        return "EXERCISE_VERDICT"

    if content.startswith("INIT_INTERVIEW"):
        return "INIT_INTERVIEW"
    elif content.startswith("HINT_REQUEST"):
        return "HINT_REQUEST"
    elif content.startswith("EXERCISE_END"):
        return "EXERCISE_END"

    return None

def get_automatic_system_prompt(prompt_type: str, language_name: str, current_code: str = "", exercise_name: str = "", execution_output: str = "") -> str:
    """
    Genera el system prompt espec√≠fico para cada tipo de prompt autom√°tico.

    Args:
        prompt_type: Tipo de prompt ("INIT_INTERVIEW", "HINT_REQUEST", "EXERCISE_END", "EXERCISE_VERDICT")
        language_name: Lenguaje de programaci√≥n actual
        current_code: C√≥digo actual del usuario (para an√°lisis)
        exercise_name: Nombre del ejercicio actual (para veredicto)
        execution_output: Output de la ejecuci√≥n del c√≥digo (para veredicto)

    Returns:
        System prompt personalizado para el tipo de prompt
    """

    base_prompt = f"""Eres un entrevistador t√©cnico profesional trabajando con {language_name}.
Tu rol es guiar al candidato a trav√©s de una sesi√≥n de pr√°ctica de programaci√≥n."""

    if prompt_type == "INIT_INTERVIEW":
        return f"""{base_prompt}

TAREA: Pres√©ntate como entrevistador t√©cnico y sugiere UN ejercicio espec√≠fico.

ESTILO:
- Saludo directo con nombre de personaje
- Sugiere UN ejercicio simple espec√≠fico
- Pregunta si acepta esa sugerencia
- NO des listas numeradas ni explicaciones largas

FORMATO DE RESPUESTA:
"Hola, soy Nemesis y ser√© tu entrevistador t√©cnico. ¬øTe parece si empezamos con [ejercicio espec√≠fico]? Es [breve descripci√≥n]."

EJEMPLOS DE EJERCICIOS SIMPLES PARA SUGERIR:
- FizzBuzz
- Reverse String
- Palindrome Check
- Find Maximum

Responde naturalmente, NO uses listas numeradas."""

    elif prompt_type == "HINT_REQUEST":
        return f"""{base_prompt}

TAREA: Analiza el c√≥digo actual y proporciona una pista espec√≠fica pero constructiva.

C√ìDIGO ACTUAL A ANALIZAR:
```{language_name.lower()}
{current_code}
```

ESTILO:
- Analiza el c√≥digo l√≠nea por l√≠nea espec√≠ficamente
- Menciona elementos espec√≠ficos: nombres de funciones, variables, comentarios
- Da pistas constructivas, no soluciones completas
- Si hay comentarios como "// TU C√ìDIGO AQU√ç", menci√≥nalo directamente
- Si hay test cases, √∫salos para explicar qu√© deber√≠a hacer la funci√≥n

ESTRUCTURA DE RESPUESTA:
üí° **Pista:** [An√°lisis espec√≠fico del c√≥digo actual]

1. **Lo que tienes bien:** [Elementos espec√≠ficos que est√°n correctos]
2. **Lo que falta:** [Elementos espec√≠ficos que necesitan implementaci√≥n]
3. **Siguiente paso:** [Pista espec√≠fica y pr√°ctica]

Menciona nombres de variables, funciones y comentarios espec√≠ficos del c√≥digo actual."""

    elif prompt_type == "EXERCISE_END":
        return f"""{base_prompt}

TAREA: Proporciona feedback sobre el ejercicio que termin√≥ y motiva para continuar.

C√ìDIGO FINAL DEL USUARIO:
```{language_name.lower()}
{current_code}
```

ESTILO:
- Feedback constructivo sobre lo que falt√≥
- Reconoce el esfuerzo realizado
- Espec√≠fico sobre qu√© elementos faltaron
- Motivador para futuras sesiones

ESTRUCTURA DE RESPUESTA:
1. Reconocimiento del esfuerzo
2. Feedback espec√≠fico sobre lo que falt√≥ completar
3. Breve explicaci√≥n de lo que se necesitaba
4. Motivaci√≥n para continuar practicando
5. Invitaci√≥n a generar un nuevo desaf√≠o

Mant√©n un tono profesional pero emp√°tico."""

    elif prompt_type == "EXERCISE_VERDICT":
        return f"""{base_prompt}

TAREA: Eval√∫a si el ejercicio fue completado correctamente y da un veredicto.

EJERCICIO: {exercise_name}

C√ìDIGO PRESENTADO:
```{language_name.lower()}
{current_code}
```

OUTPUT DE EJECUCI√ìN:
```
{execution_output}
```

CRITERIOS DE EVALUACI√ìN:
1. **Coherencia**: ¬øEl c√≥digo presentado es coherente con el ejercicio "{exercise_name}"?
2. **Funcionalidad**: ¬øEl output muestra que el c√≥digo funciona correctamente?
3. **Integridad**: ¬øEl output corresponde realmente a la ejecuci√≥n del c√≥digo presentado?

VEREDICTOS POSIBLES:
- ‚úÖ **APROBADO**: Si el c√≥digo es correcto, funciona y el output es coherente
- ‚ùå **REPROBADO**: Si hay inconsistencias, el c√≥digo est√° mal, o el output no corresponde

ESTRUCTURA DE RESPUESTA:
üèÜ **VEREDICTO: [APROBADO/REPROBADO]**

**An√°lisis:**
- C√≥digo: [Evaluaci√≥n del c√≥digo presentado]
- Output: [Evaluaci√≥n del output de ejecuci√≥n]
- Coherencia: [Si todo es coherente entre s√≠]

**Explicaci√≥n:** [Razones espec√≠ficas del veredicto]

**Feedback:** [Comentarios constructivos]

S√© estricto pero justo en tu evaluaci√≥n. Si detectas manipulaci√≥n del output o inconsistencias, menciona espec√≠ficamente qu√© est√° mal."""

    return base_prompt

def should_override_exercise_logic(prompt_type: str) -> Tuple[bool, Optional[str]]:
    """
    Determina los flags de respuesta para prompts autom√°ticos.

    REGLA CLAVE: Los prompts autom√°ticos NUNCA deben retornar can_generate_exercise=True
    porque son mensajes del sistema, no acuerdos de ejercicios espec√≠ficos.

    Args:
        prompt_type: Tipo de prompt autom√°tico

    Returns:
        Tuple de (can_generate_exercise, exercise_name)
    """
    # Los prompts autom√°ticos NUNCA permiten generar ejercicios
    # porque no son acuerdos espec√≠ficos entre usuario y asistente
    return False, None